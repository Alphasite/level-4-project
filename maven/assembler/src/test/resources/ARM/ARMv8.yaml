# Want to support
# http://zenit.senecac.on.ca/wiki/index.php/Aarch64_Register_and_Instruction_Quick_Start
# add r0,r1,r2      // load r0 with r1+r2
# add r0,r1,99      // load r0 with r1+99
# adr r0,label      // load r0 with the address label (this actually calculates an address from the PC plus an offset)
# b.eq label        // branch to label if equal
# b.ne label        // branch to label if not equal
# b.lt label        // branch to label if less
# b.gt label        // branch to label if greater
# cmp r0,r1         // compare register r0 with register r1. The comparison sets flags in the processor status register which affect conditional branches.
# cmp r0,99         // compare the number 99 with register r0. The comparison sets flags in the processor status register which affect conditional branches.
# ldr r0,[r1,0]     // load register r0 from the address pointed to by (r1 + (0 * size)) where size is 8 bytes for 64-bit stores, 4 bytes for 32-bit stores
# ldr w0,[r1,0]     // like above but reads 32 bits only - note the use of w0 instead of r0 for the source register name
# ldrb w0,[r1,0]    // like above but reads 1 byte (8 bits) only - note the use of w0 instead of r0 for the source register name
# ldur r0,[r1,0]    // load register r0 from the address pointed to by (r1 + 0) - the mnemonic means "load unscaled register"
# mov r0,r1         // move data from r1 to r0
# mov r0,99         // load r0 with 99 (only certain immediate values are possible)
# str r0,[r1,0]     // store register r0 to address pointed to by (r1 + (0 * size)) where size is 8 bytes for 64-bit stores
# strb w0,[r1,0]    // like str but writes one byte only - note the use of w0 instead of r0 for the source register name
# stur r0,[r1,0]    // store register r0 to the address pointed to by (r1 + 0) - the mnemonic means "store unscaled register"
# svc 0             // perform a syscall
# msub r0,r1,r2,r3  // load r0 with r3-(r1*r2) (useful for calculating remainders)
# madd r0,r1,r2,r3  // load r0 with r3+(r1*r2)
# mul r0,r1,r2      // load r0 with r1*r2 (actually an alias - see ARM ARM)
# push r0           // push r0 onto the stack
# pop r0            // pop r0 off the stack
# udiv r0,r1,r2     // unsigned - divide r1 by r2, places quotient into r0 - remainder is not calculated (use msub)

configuration:
  line can start with label: true
  label bit size: 16
  word size: 16
  label regex: "^(\\w+)"
  argument separator: ",\\s*"
  comment regex: "//.*"

references:
  - name: literal4
    kind: meta
    references:
      - name: hexadecimal
        kind: literal
        literal type: HEXADECIMAL
        literal size: 4
        validation regex: "0x\\d+"
        extraction regex: "0x(\\d+)"

      - name: int4
        kind: literal
        literal type: INTEGER
        literal size: 4
        validation regex: "\\d+"
        extraction regex: "(\\d+)"

  - name: literal16
    kind: meta
    references:
      - name: hexadecimal
        kind: literal
        literal type: HEXADECIMAL
        literal size: 16
        validation regex: "0x\\d+"
        extraction regex: "0x(\\d+)"

      - name: int4
        kind: literal
        literal type: INTEGER
        literal size: 16
        validation regex: "(\\+|-)?\\d+"
        extraction regex: "((\\+|-)?\\d+)"

  - name: registers
    kind: meta
    references:
    - name: general registers
      kind: meta
      references:
      - name: 64bit general registers
        kind: mapped
        size: 4
        range:
          format string: "[X|r]{0}"
          start index: 0
          start literal: 0
          count: 32

      - name: 32bit general registers
        kind: mapped
        size: 4
        range:
          format string: "[W|w]{0}"
          start index: 0
          start literal: 0
          count: 32

    - name: special registers
      kind: mapped
      size: 4
      mappings:
        PC: 0
        SP: 0
        WSP: 0
        ELR: 0

    - name: simd registers
      kind: meta
      references:
      - name: 128bit simd registers
        kind: mapped
        size: 4
        range:
          format string: "Q{0}"
          start index: 0
          start literal: 0
          count: 32

      - name: 64bit simd registers
        kind: mapped
        size: 4
        range:
          format string: "D{0}"
          start index: 0
          start literal: 0
          count: 32

      - name: 32bit simd registers
        kind: mapped
        size: 4
        range:
          format string: "S{0}"
          start index: 0
          start literal: 0
          count: 32

      - name: 16bit simd registers
        kind: mapped
        size: 4
        range:
          format string: "H{0}"
          start index: 0
          start literal: 0
          count: 32

      - name: 8bit simd registers
        kind: mapped
        size: 4
        range:
          format string: "B{0}"
          start index: 0
          start literal: 0
          count: 32

  - name: label
    kind: label
    size: 16
    validation regex: "^\\w+$"
    extraction regex: "\\w+"

  - name: memory
    kind: indexed
    source before offset: true
    regex: "(.*?)\\[(.*?)\\]"
    valid left hand types:
      - literal16
      - label
    valid right hand types:
      - registers

  - name: register indexed
    kind: indexed
    source before offset: true
    regex: "\\[.*?,.*?\\]"
    valid left hand types:
      - 64bit general registers
    valid right hand types:
      - literal


instructions:
#  - name: store
#    byte sequence:
#      - literal: 0xF
#        size: 4
#      - path: destination
#      - path: address.offset
#      - literal: 0x2
#        size: 4
#      - path: address.source
#    arguments:
#      destination: register
#      address: memory

  - name: add
    kind: meta
    instructions:
      - name: addrrr
        byte sequence:
          - path: destination
            size: 5
          - path: sourceA
            size: 5
          - literal: 0
            size: 5
          - path: sourceB
            size: 5
          - literal: 0xD0 # add/sub instruction
            size: 8
          - literal: 0 # shift
            size: 1
          - literal: 1 # add op
            size: 1
          - literal: 1 # 64bit
            size: 1
        arguments:
          destination: 64bit general registers
          sourceA: 64bit general registers
          sourceB: 64bit general registers

      - name: addrrl
        byte sequence:
          - path: destination
            size: 5
          - path: sourceA
            size: 5
          - path: "sourceB + shift" # literal + 2 shift bits
            size: 13
          - literal: 0xD0 # add/sub instruction
            size: 5
          - literal: 1 # shift
            size: 1
          - literal: 1 # add op
            size: 1
          - literal: 1 # 64bit
            size: 1
        arguments:
          destination: 64bit general registers
          sourceA: 64bit general registers
          sourceB + shift: literal

  - name: adr
    byte sequence:
      - path: destination
        size: 5
      - path: source
        size: 18
      - literal: 0x10
        size: 5
      - literal: 0x0 # TODO
        size: 2

    arguments:
      destination: 64bit general registers
      source: label

  - name: b.eq
    byte sequence:
      - literal: #TODO
        size: 4
      - literal: 0
        size: 1
      - path: label
        size: 19
      - literal: 0
        size: 1
      - literal: 0xA2
        size: 8

    arguments:
      destination: label

  - name: b.ne
    byte sequence:
      - literal: #TODO
        size: 4
      - literal: 0
        size: 1
      - path: label
        size: 19
      - literal: 0
        size: 1
      - literal: 0xA2
        size: 8
    arguments:
      destination: label

  - name: b.lt
    byte sequence:
      - literal: #TODO
        size: 4
      - literal: 0
        size: 1
      - path: label
        size: 19
      - literal: 0
        size: 1
      - literal: 0xA2
        size: 8
    arguments:
      destination: label

  - name: b.gt
    byte sequence:
      - literal: #TODO
        size: 4
      - literal: 0
        size: 1
      - path: label
        size: 19
      - literal: 0
        size: 1
      - literal: 0xA2
        size: 8
    arguments:
      destination: label

  - name: cmp
    kind: meta
    instructions:
      - name: cmprr
        byte sequence:
          -
        arguments:
          sourceA: 64bit general registers
          sourceB: label

      - name: cmprl
        byte sequence:
          -
        arguments:
          sourceA: 64bit general registers
          sourceB: label

  - name: ldr
    kind: meta
    instructions:
      - name: ldr
        byte sequence:
          -
        arguments:
          destination: 64bit general registers
          source: register indexed

      - name: ldr
        byte sequence:
          -
        arguments:
          destination: 32bit general registers
          source: register indexed

  - name: ldrb
    byte sequence:
      -
    arguments:
          destination: 32bit general registers
          source: register indexed

  - name: ldur
    byte sequence:
      -
    arguments:
        destination: 64bit general registers
        source: register indexed

  - name: mov
    kind: meta
    instructions:
      - name: mov rr
        byte sequence:
          -
        arguments:
          sourceA: 64bit general registers
          sourceB: 64bit general registers

      - name: mov rl
        byte sequence:
          -
        arguments:
          sourceA: 64bit general registers
          sourceB: literal

  - name: str
    byte sequence:
      -
    arguments:
        destination: 64bit general registers
        source: register indexed

  - name: strb
    byte sequence:
      -
    arguments:
        destination: 32bit general registers
        source: register indexed

  - name: stur
    byte sequence:
      -
    arguments:
        destination: 64bit general registers
        source: register indexed

  - name: svc
    byte sequence:
      -
    arguments:
      syscall: literal

  - name: msub
    byte sequence:
      -
    arguments:
      destination: 64bit general registers
      sourceA: 64bit general registers
      sourceB: 64bit general registers
      sourceC: 64bit general registers

  - name: madd
    byte sequence:
      -
    arguments:
      destination: 64bit general registers
      sourceA: 64bit general registers
      sourceB: 64bit general registers
      sourceC: 64bit general registers

  - name: mul
    byte sequence:
      -
    arguments:
      destination: 64bit general registers
      sourceA: 64bit general registers
      sourceB: 64bit general registers

  - name: push
    byte sequence:
      -
    arguments:
      register to push: 64bit general registers

  - name: pop
    byte sequence:
      -
    arguments:
      destination: 64bit general registers

  - name: udiv
    byte sequence:
      -
    arguments:
      destination: 64bit general registers
      sourceA: 64bit general registers
      divisor: 64bit general registers
