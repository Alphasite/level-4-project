configuration:
  line can start with label: true
  label bit size: 16
  word size: 16
  label regex: "^(\\w+)"
  argument separator: ",\\s*"
  comment regex: ";.*"

references:
  - name: literal4
    kind: meta
    references:
      - name: hexadecimal
        kind: literal
        literal type: HEXADECIMAL
        literal size: 4
        validation regex: "0x\\d+"
        extraction regex: "0x(\\d+)"

      - name: int4
        kind: literal
        literal type: INTEGER
        literal size: 4
        validation regex: "\\d+"
        extraction regex: "(\\d+)"

  - name: literal16
    kind: meta
    references:
      - name: hexadecimal
        kind: literal
        literal type: HEXADECIMAL
        literal size: 16
        validation regex: "0x\\d+"
        extraction regex: "0x(\\d+)"

      - name: int4
        kind: literal
        literal type: INTEGER
        literal size: 16
        validation regex: "(\\+|-)?\\d+"
        extraction regex: "((\\+|-)?\\d+)"

  - name: register
    kind: mapped
    size: 4
    mappings:
      "R0": 0x0
      "R1": 0x1
      "R2": 0x2
      "R3": 0x3
      "R4": 0x4
      "R5": 0x5
      "R6": 0x6
      "R7": 0x7
      "R8": 0x8
      "R9": 0x9
      "R10": 0xA
      "R11": 0xB
      "R12": 0xC
      "R13": 0xD
      "R14": 0xE
      "R15": 0xF

  - name: label
    kind: label
    size: 16
    validation regex: "^\\w+$"
    extraction regex: "\\w+"

  - name: memory
    kind: indexed
    source before offset: true
    regex: "(.*?)\\[(.*?)\\]"
    valid left hand types:
      - literal16
      - label
    valid right hand types:
      - register

instructions:

  - name: add
    byte sequence: 0x00
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: sub
    byte sequence: 0x01
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: mul
    byte sequence: 0x02
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: div
    byte sequence: 0x03
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: cmplt
    byte sequence: 0x04
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: cmpeq
    byte sequence: 0x05
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: cmpgt
    byte sequence: 0x06
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: inv
    byte sequence: 0x07
    size: 4
    arguments:
      destination: register
      word: register
      ignored: register

  - name: and
    byte sequence: 0x08
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: or
    byte sequence: 0x09
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: xor
    byte sequence: 0x0A
    size: 4
    arguments:
      destination: register
      lhs: register
      rhs: register

  - name: shiftl
    byte sequence: 0x0B
    size: 4
    arguments:
      destination: register
      word: register
      bits: register

  - name: shiftr
    byte sequence: 0x0C
    size: 4
    arguments:
      destination: register
      word: register
      bits: register

  - name: trap
    byte sequence: 0x0D
    size: 4
    arguments:
      arg1: register
      arg2: register
      arg3: register

  - name: lea
    byte sequence:
      - literal: 0xF
        size: 4
      - path: destination
      - path: address.offset
      - literal: 0x0
        size: 4
      - path: address.source
    arguments:
      destination: register
      address: memory

  - name: load
    byte sequence:
      - literal: 0xF
        size: 4
      - path: destination
      - path: address.offset
      - literal: 0x1
        size: 4
      - path: address.source
    arguments:
      destination: register
      address: memory

  - name: store
    byte sequence:
      - literal: 0xF
        size: 4
      - path: destination
      - path: address.offset
      - literal: 0x2
        size: 4
      - path: address.source
    arguments:
      destination: register
      address: memory

  - name: jump
    byte sequence:
      - literal: 0xF
        size: 4
      - literal: 0x0
        size: 4
      - path: address.offset
      - literal: 0x3
        size: 4
      - path: address.source
    arguments:
      address: memory

  - name: jumpf
    byte sequence:
      - literal: 0xF
        size: 4
      - path: conditional
      - path: address.offset
      - literal: 0x4
        size: 4
      - path: address.source
    arguments:
      conditional: register
      address: memory

  - name: jumpt
    byte sequence:
      - literal: 0xF
        size: 4
      - path: conditional
      - path: address.offset
      - literal: 0x5
        size: 4
      - path: address.source
    arguments:
      conditional: register
      address: memory

  - name: jal
    byte sequence:
      - literal: 0xF
        size: 4
      - path: source address
      - path: address.offset
      - literal: 0x6
        size: 4
      - path: address.source
    arguments:
      source address: register
      address: memory

  - name: loadxi
    byte sequence:
      - literal: 0xF
        size: 4
      - path: destination
      - path: address.offset
      - literal: 0x7
        size: 4
      - path: address.source
    arguments:
      destination: register
      address: memory

  - name: data
    byte sequence: 0x0
    size: 0
    arguments:
      value: literal16
