------------------------------------------------------------------------
--  ArraySum: machine language program for the Sigma16 architecture
------------------------------------------------------------------------

{-
    A machine language program for the Sigma16 architecture that
    sums the contents of an array.
-}

module Main where
import M1run

main :: IO ()
main = run_Sigma16_program arraysum 10000

------------------------------------------------------------------------

arraysum :: [String]
arraysum =

-- Machine Language  Addr    Assembly Language     Comment
-- ~~~~~~~~~~~~~~~~  ~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  [
                   -- 1   '                               ; ArrayMax: find the maximum element of an array':
                   -- 2   '                               ;':
                   -- 3   '                               ; The program is given':
                   -- 4   '                               ;   *  a natural number n, assume n>0':
                   -- 5   '                               ;   *  an n-element array x[0], x[1], ..., x[n-1]':
                   -- 6   '                               ;  It calculates':
                   -- 7   '                               ;   * sum = the sum of elements of x':
                   -- 10  '                               ; program ArraySum':
                   -- 11  '                               ;   sum := 0':
                   -- 12  '                               ;   for i := 0 to n-1 step 1':
                   -- 13  '                               ;        max := max + x[i]':
                   -- 15  '                               ; Register usage':
                   -- 16  '                               ;   R1 = constant 1':
                   -- 17  '                               ;   R2 = n':
                   -- 18  '                               ;   R3 = i':
                   -- 19  '                               ;   R4 = sum':
                   -- 21  '                               ; Initialise':
    "f1000001",    -- 23  '       lea   R1,1[R0]          ; R1 = constant 1': [f1000001][11111111111111111111111111110001, 00000000, 00000000, 00000001]@32 Args:{[1][00000001]@4, [1][00000000, 00000001]@16[[0][00000000]@4]#[10][00000000, 00000000, 00010000]@20}
    "f2010014",    -- 24  '       load  R2,n[R0]          ; R2 = n': [f2010014][11111111111111111111111111110010, 00000001, 00000000, 00010100]@32 Args:{[2][00000010]@4, n#[14][00000000, 00010100]@16[[0][00000000]@4]#[140][00000000, 00000001, 01000000]@20}
    "f3000000",    -- 25  '       lea   R3,0[R0]          ; R3 = i = 0': [f3000000][11111111111111111111111111110011, 00000000, 00000000, 00000000]@32 Args:{[3][00000011]@4, [0][00000000, 00000000]@16[[0][00000000]@4]#[0][00000000, 00000000, 00000000]@20}
    "f4000000",    -- 26  '       load  R4,0[R0]          ; R4 = max = x[0]': [f4010000][11111111111111111111111111110100, 00000001, 00000000, 00000000]@32 Args:{[4][00000100]@4, [0][00000000, 00000000]@16[[0][00000000]@4]#[0][00000000, 00000000, 00000000]@20}
                   -- 28  '                               ; Top of loop, determine whether to remain in loop':
                   -- 30  'loop':                           #loop
    "4532",        -- 31  '       cmplt R5,R3,R2          ; R5 = (i<n)': [4532][01000101, 00110010]@16 Args:{[5][00000101]@4, [3][00000011]@4, [2][00000010]@4}
    "f5040011",    -- 32  '       jumpf R5,done[R0]       ; if i>=n then goto done': [f5040011][11111111111111111111111111110101, 00000100, 00000000, 00010001]@32 Args:{[5][00000101]@4, done#[11][00000000, 00010001]@16[[0][00000000]@4]#[110][00000000, 00000001, 00010000]@20}
                   -- 34  '                               ; if x[i] > max':
    "f5310016",    -- 36  '       load  R5,x[R3]          ; R5 = x[i]': [f5310016][11111111111111111111111111110101, 00110001, 00000000, 00010110]@32 Args:{[5][00000101]@4, x#[16][00000000, 00010110]@16[[3][00000011]@4]#[163][00000000, 00000001, 01100011]@20}
                   -- 38  '                               ; then max := x[i]':
    "0445",        -- 40  '       add   R4,R4,R5          ; sum := sum + x[i]': [445][00000100, 01000101]@16 Args:{[4][00000100]@4, [4][00000100]@4, [5][00000101]@4}
                   -- 42  '                               ; Bottom of loop, increment loop index':
    "0331",        -- 44  'next   add   R3,R3,R1          ; i = i + 1': #next [331][00000011, 00110001]@16 Args:{[3][00000011]@4, [3][00000011]@4, [1][00000001]@4}
    "f0030008",    -- 45  '       jump  loop[R0]          ; go to top of loop': [f0030008][11111111111111111111111111110000, 00000011, 00000000, 00001000]@32 Args:{loop#[8][00000000, 00001000]@16[[0][00000000]@4]#[80][00000000, 00000000, 11111111111111111111111110000000]@20}
                   -- 47  '                               ; Exit from loop':
    "f4020015",    -- 49  'done   store R4,sum[R0]        ; max = R4': #done [f4020015][11111111111111111111111111110100, 00000010, 00000000, 00010101]@32 Args:{[4][00000100]@4, sum#[15][00000000, 00010101]@16[[0][00000000]@4]#[150][00000000, 00000001, 01010000]@20}
    "d000",        -- 50  '       trap  R0,R0,R0          ; terminate': [d000][11111111111111111111111111010000, 00000000]@16 Args:{[0][00000000]@4, [0][00000000]@4, [0][00000000]@4}
                   -- 52  '                               ; Data area':
    "0006",        -- 53  'n        data   6'             : #n [6][00000000, 00000110]@16 Args:{[6][00000000, 00000110]@16}
    "0000",        -- 54  'sum      data   0'             : #sum [0][00000000, 00000000]@16 Args:{[0][00000000, 00000000]@16}
    "ffff",        -- 55  'x        data  -1'             : #x [ffff][11111111111111111111111111111111, 11111111111111111111111111111111]@16 Args:{[ffff][11111111111111111111111111111111, 11111111111111111111111111111111]@16}
    "0000",        -- 56  '         data   0'             : [0][00000000, 00000000]@16 Args:{[0][00000000, 00000000]@16}
    "0001",        -- 57  '         data   1'             : [1][00000000, 00000001]@16 Args:{[1][00000000, 00000001]@16}
    "0002",        -- 58  '         data   2'             : [2][00000000, 00000010]@16 Args:{[2][00000000, 00000010]@16}
    "0003",        -- 59  '         data   3'             : [3][00000000, 00000011]@16 Args:{[3][00000000, 00000011]@16}
    "0004"         -- 60  '         data   4'             : [4][00000000, 00000100]@16 Args:{[4][00000000, 00000100]@16}
  ]

------------------------------------------------------------------------
